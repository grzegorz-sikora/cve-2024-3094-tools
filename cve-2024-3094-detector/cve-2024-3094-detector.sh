#!/usr/bin/env bash

RED='\033[1;31m'
GREEN='\033[1;32m'
NC='\033[0m'

echo -e "${GREEN}
      _  _  _  _  _  _  _  _  _  _  _  _       _  _  _  _       _  _  _
     (_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_)(_) _  _(_)(_)(_)(_)_  _ (_)(_)(_) _
        (_)   (_)            (_)         (_)(_)          (_)(_)         (_)
        (_)   (_) _  _       (_) _  _  _ (_)(_)          (_)(_)    _  _  _
        (_)   (_)(_)(_)      (_)(_)(_)(_)   (_)          (_)(_)   (_)(_)(_)
 _      (_)   (_)            (_)   (_) _    (_)          (_)(_)         (_)
(_)  _  (_)   (_)            (_)      (_) _ (_)_  _  _  _(_)(_) _  _  _ (_)
 (_)(_)(_)    (_)            (_)         (_)  (_)(_)(_)(_)     (_)(_)(_)(_)

		CVE-2024-3094 detector by JFrog
 ${NC}"

malicious_xz=0

# 1. Check XZ version
if [ -f /etc/alpine-release ]; then
	# Running on Alpine - vulnerable versions are knowns: 5.6.1-r0 and 5.6.1-r1
    xz_version=$(apk info --installed -v xz) 
    if [[ "$xz_version" =~ ^xz-5\.6\.1-r[0-1]$ ]]; then
        malicious_xz=1
    fi

elif [ -f /etc/arch-release ]; then
    # Running on Arch - vulnerable versions are knowns: 5.6.0-1 and 5.6.1-1
    xz_version=$(pacman -Q xz | sed 's/^xz //')
    if [[ "$xz_version" =~ ^5\.6\.[0-1]-1$ ]]; then
        malicious_xz=1
    fi

else
    # Running on other Linux - Check if xz version is >= 5.5.0
    xz_version=$(strings "$(which xz)" | awk '/xz \(XZ Utils/ {print $4}')
    if awk -vv="$xz_version" 'BEGIN {split(v,a,"."); if (a[1]>=5 && a[2]>=5) exit 0; else exit 1}'; then
	malicious_xz=1
    fi
fi
    
# 2. Check if sshd binary is present
sshd_path=$(which sshd)
if [ -z "$sshd_path" ]; then
    sshd_found=0
else
    sshd_found=1
fi

# 3. Check if sshd is using lzma
lzma_used=$(ldd "$sshd_path" 2>/dev/null | grep -q 'lzma'; echo $?)
if [ "$lzma_used" -eq 0 ]; then
    lzma_path=$(ldd "$sshd_path" 2>/dev/null | grep 'lzma' | awk '{print $3}')
    lzma_found=1
else
    lzma_found=0
fi

# 4. Check for the specific byte pattern in lzma
if [ "$lzma_found" -eq 1 ]; then
    # Test number 1: Check for the prologue byte pattern of the vulnerable lzma version
    pattern_prologue='f30f1efa554889f54c89ce5389fb81e7000000804883ec28488954241848894c2410'
    byte_pattern=$(hexdump -ve '1/1 "%.2x"' "$lzma_path" | grep -q $pattern_prologue; echo $?) 
    if [ "$byte_pattern" -eq 0 ]; then
        byte_pattern_1_found=1
    else
        byte_pattern_1_found=0
    fi

    # Test number 2: Check for the encoded strings hidden in the lzma binary
    pattern_encoded_strings='0400100803000000030000000300000004007806030000000300000030000c00030000000400d800030000000300000003000000030000000300000043000000320000000300000003000000130100009200000012000000420000009300000062000000b3000000b200000003000000030000009300000042000000c3000000b20000000300000012000000040008070400080112000000630000000300000013000000f200000003000000a30000009200000033010000f200000043010000220000002201000004007008220000002300000072010000b30100009200000083000000230000008201000063010000130000000400a001220000002300000072010000b3010000b20100000300000003000000030000002301000043000000c20000009001300072000000210104000301000092000000220100003200000033010000d200000012000000130000000400400ce20000000300000053010000220100000400d006e2000000a30000009200000053010000a0001400d2010000040058096200000092000000040018044201000013000000b30100000400e00433000000a20100004301000092000000a2000000330200007201000010004000a000300000022000a200000021000c001200000004009007b20100005300000093010000920000002201000083010000530000008200000032010000030200006201000063010000b20000002201000033000000330000007300000004001800d20100001302000052000000d300000002010000c300000052000000d3000000b2010000a301000023000000e20100003300000033000000b3010000a200000053000000b3000000c2010000d301000003000000220000006300000012000000e20100002302000022000000a200000053000000630000000400b00082010000530000000300000003000000e3010000320000007300000002020000b300000052000000920000000300000093020000020200005300000030024000b2000000a10204000202000003020000420100008301000092000000030000002001e000e20100009102040004006009d2010000030000000300000003000000030000000400d009e20100000400680432010000030000000300000042000000c300000080001800720100002102040032010000d2000000130100005300000092000000530000008200000020004800520000000400e807620000009200000083010000030000000400680232010000030000000300000042000000530000002301000043000000c200000003000000f00228009201000011010400d20000001301000053000000920000005300000072000000820000000400e0068201000033000000e301000012000000c2010000b3000000a3000000d3000000c2000000320100001201000013010000020100000300000030003c0003000000610104000400280b4201000013000000b301000004003808220100001200000050030c00b2010000710104006201000063000000520000009301000082010000930000008200000003010000720000000400a80252030000230200005200000093010000c201000023010000a30000000400080c5203000023020000520000003300000043010000820000000400f003420100003200000062000000f3010000420000000003340070021800f2020000f101080033010000c2000000a3010000b20100000400180182010000430100008200000004000804820200005102040033000000d3000000c3000000920100000400f8003202000011020400c3010000620100009200000020024400a20100000400100d4201000013000000b30100000400f80a220100001200000050030c00b20100007101040062010000630000005200000093010000f20100000400f8064201000013000000b30100000400580732010000030000000300000042000000530000002301000043000000c200000003000000b30000003201000093000000c200000063020000f20100009300000012000000040010053202000022000000c2000000a3010000020200004302000053000000100468007002200072020000310208007200000082000000120100000400280c82020000e302000032020000430200009201000082000000430200000400600ce203000003000000530400003202000002020000040088013001cc01700010016000d00030003c0040041c000100040081021400a200000070023802c20100000400c008f20300005303000013010000f200000013010000e201000072010000020100000400a806820100004301000053000000e2000000e20000002301000083010000c2000000f2030000e304000082000000720100004301000053000000e2000000e200000023010000b20000009301000023000000520000006202000010005c0062010000210204000400e001b2020000a201000043020000830000005201000013000000c200000032000000130100000400f00c7202000003000000c2000000c20000000400c00b72020000120000003301000033000000f2010000f3010000020100000400900a320400002300000053000000930100000400980b620200008300000082000000b2010000c3010000420000000400e00312020000430000009200000052010000a3020000f201000083010000a2000000b3000000b3000000020100006300000020008400c0016400e00150006001340032020000110310000400880a12020000420000000301000000031000e20200000400c00a4201000013000000b30100000400980732010000030000000300000042000000d200000013010000530000000400180922010000120000000400d0018201000033010000c2000000a3010000b2010000330000004301000082010000530000002301000043000000c2000000030000000400400532010000030000000300000042000000d2000000130100000400f808e2000000f200000000020c00a2010000100594007003740070036800b00330002001040031031000820000002200000004009009e30100001301000012050000a3010000f30000000400a804120400'
    byte_pattern=$(hexdump -ve '1/1 "%.2x"' "$lzma_path" | grep -q $pattern_encoded_strings; echo $?)
    byte_pattern_2_found=$((!byte_pattern))
    
    # Logical AND between byte_pattern_1_found and byte_pattern_2_found
    if [ "$byte_pattern_1_found" -eq 1 ] || [ "$byte_pattern_2_found" -eq 1 ]; then
        byte_pattern_found=1
    else
        byte_pattern_found=0
    fi

else
    byte_pattern_found=0
fi

# Output results
echo -ne "XZ vulnerable version: "  
if [ "$malicious_xz" -eq 1 ]; then
    echo -e "${RED}YES${NC} ($xz_version)"
else
    echo -e "${GREEN}NO${NC} ($xz_version)"
fi

echo -ne "SSHD found in the system: "
if [ "$sshd_found" -eq 1 ]; then
    echo -e "${RED}YES${NC} ($sshd_path)"
else
    echo -e "${GREEN}NO${NC}"
fi

echo -ne "SSHD linked with LZMA: "
if [ "$lzma_found" -eq 1 ]; then
    echo -e "${RED}YES${NC} ($lzma_path)"
else
    echo -e "${GREEN}NO${NC}"
fi

if [ "$lzma_found" -eq 1 ] ; then
    echo -ne "LZMA vulnerable version: "
    if [ "$byte_pattern_1_found" -eq 1 ] && [ "$byte_pattern_2_found" -eq 1 ]; then
        echo -e "${RED}YES${NC}"
        echo -e "  ${RED}Specific Prologue byte pattern matched${NC}"
        echo -e "  ${RED}Encoded Strings byte patterns matched${NC}"
    elif [ "$byte_pattern_1_found" -eq 1 ]; then
        echo -e "${RED}YES${NC}"
        echo -e "  ${RED}Specific Prologue byte pattern matched${NC}"
        echo -e "  ${GREEN}Encoded Strings byte patterns NOT matched${NC}"
    elif [ "$byte_pattern_2_found" -eq 1 ]; then
        echo -e "${RED}YES${NC}"
        echo -e "  ${GREEN}Specific Prologue byte pattern NOT matched${NC}"
        echo -e "  ${RED}Encoded Strings byte patterns matched${NC}"
    else
        echo -e "${GREEN}NO${NC}"
        echo -e "  ${GREEN}Specific Prologue byte pattern NOT matched${NC}"
        echo -e "  ${GREEN}Encoded Strings byte patterns NOT matched${NC}"
    fi
fi

# Output conclusion
echo
if [ "$malicious_xz" -eq 1 ] || [ "$byte_pattern_found" -eq 1 ]; then
	echo -e "${RED}- Malicious XZ/LZMA found: YES ${NC}" 
    affected=1
else
	echo -e "${GREEN}- Malicious XZ/LZMA found: NO ${NC}"
	affected=0
fi

if [ "$lzma_found" -eq 1 ]; then
    echo -e "${RED}- Vulnerable SSHD found: YES (SSHD linked with LZMA) ${NC}"
    vulnerable=1
else
    if [ "$sshd_found" -eq 0 ]; then
         echo -e "${GREEN}- Vulnerable SSHD found: NO (SSHD not found) ${NC}"
    else 
         echo -e "${GREEN}- Vulnerable SSHD found: NO (SSHD does not link with LZMA) ${NC}"
    fi
    vulnerable=0
fi

if [ "$vulnerable" -eq 1 ] && [ "$affected" -eq 1 ]; then
    echo -e "Conclusion: ${RED}LIKELY TO BE VULNERABLE TO CVE-2024-3094 ${NC}"
else
    echo -e "Conclusion: ${GREEN}NOT VULNERABLE TO CVE-2024-3094 ${NC}"
fi

echo
